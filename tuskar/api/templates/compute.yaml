<%def name="render(x)">\
  NovaCompute${x}:
    Metadata:
      OpenStack::ImageBuilder::Elements:
      - nova-compute
      admin-password: unset
      glance:
        host:
          Fn::GetAtt:
          - notcompute
          - PrivateIp
      heat:
        access_key_id:
          Ref: Key
        refresh:
        - resource: NovaCompute
        secret_key:
          Fn::GetAtt:
          - Key
          - SecretAccessKey
        stack:
          name:
            Ref: AWS::StackName
          region:
            Ref: AWS::Region
      interfaces:
        control:
          Ref: NovaInterfaces
      keystone:
        host:
          Fn::GetAtt:
          - notcompute
          - PrivateIp
      neutron:
        host:
          Fn::GetAtt:
          - notcompute
          - PrivateIp
        ovs:
          bridge_mappings: ''
          enable_tunneling: 'True'
          local_ip: 0.0.0.0
          network_vlan_ranges: ''
          tenant_network_type: gre
        ovs_db:
          Fn::Join:
          - ''
          - - mysql://neutron:unset@
            - Fn::GetAtt:
              - notcompute
              - PrivateIp
            - /neutron
      nova:
        compute_driver:
          Ref: NovaComputeDriver
        db:
          Fn::Join:
          - ''
          - - mysql://nova:unset@
            - Fn::GetAtt:
              - notcompute
              - PrivateIp
            - /nova
        host:
          Fn::GetAtt:
          - notcompute
          - PrivateIp
      rabbit:
        host:
          Fn::GetAtt:
          - notcompute
          - PrivateIp
        password: guest
      service-password: unset
      swift:
        store_key: ''
        store_user: ''
    Properties:
      ImageId:
        Ref: NovaImage
      InstanceType:
        Ref: InstanceType
      KeyName:
        Ref: KeyName
      AvailabilityZone: nova::${x}
      UserData:
        Fn::Base64:
          |
          #!/bin/bash -v
          /opt/aws/bin/cfn-init
          #0. SOURCE CREDENTIALS FOR NOVA COMMANDS
          source /root/stackrc
        % for rc in resource_classes:
          #1. CREAT HOST AGGREGATE for each resource class
          AGGREGATE_ID=$(nova aggregate-create "${rc.name}-hosts" | tail -n +4 | head -n 1 | tr -s ' ' | cut -d '|' -f2)
          #2. SET HOST AGGREGATE METADATA
          nova aggregate-set-metadata $AGGREGATE_ID class="${rc.name}"
          #3. CREATE EACH FLAVOR
        % for f in rc.flavors:
          nova flavor-show "${rc.name}.${f.name}" &> /dev/null
          if [ $? == 1 ]; then
          <% ram, vcpu, disk, ephemeral, swap = nova_util.extract_from_capacities(f) %>
            nova flavor-create --ephemeral=${ephemeral} --swap=${swap} "${rc.name}.${f.name}" "auto" ${ram} ${disk} ${vcpu}
          fi
          #4. SET FLAVOR METADATA
          nova flavor-key "${rc.name}.${f.name}" set class="${rc.name}"
        % endfor
          #5. ADD NODES TO HOST AGGREGATE
    % for rack in rc.racks:
        % for node in rack.nodes:
          nova aggregate-add-host $AGGREGATE_ID ${node.node_id}
        % endfor
        % endfor
        % endfor
    Type: AWS::EC2::Instance
</%def>\
